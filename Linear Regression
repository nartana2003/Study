# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Example dataset (can be replaced with any dataset)
# Creating a small dataset
data = {
    'Hours of Study': [1,2,3,4,5,6,7,8,9,10,11,12],
    'Test Score': [10,18,27,35,40,47,59,67,76,88,93,100]
}

# Convert the dataset into a Pandas DataFrame
df = pd.DataFrame(data)

# Define independent (X) and dependent variable (y)
X = df[['Hours of Study']]  # Independent variable (reshape if necessary)
y = df['Test Score']  # Dependent variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()

# Train the model using the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model's performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Output the results
print(f"Mean Squared Error: {mse}")
print(f"R-squared Score: {r2}")

# Plotting the regression line
plt.scatter(X_test, y_test, color='blue', label='Actual data points')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.title('Linear Regression')
plt.xlabel('Hours of Study')
plt.ylabel('Test Scores')
plt.legend()
plt.show()
