import numpy as np
from sklearn.metrics import pairwise_distances
from random import sample

def k_medoids(data, k, max_iter=100, random_state=None):
    """
    K-Medoids clustering algorithm.

    Parameters:
    data: ndarray of shape (n_samples, n_features)
    k: number of clusters
    max_iter: maximum number of iterations
    random_state: seed for reproducibility

    Returns:
    medoids: indices of the medoids
    labels: cluster labels for each data point
    """
    if random_state:
        np.random.seed(random_state)

    n_samples = data.shape[0]
    # Initialize medoids randomly
    medoids = sample(range(n_samples), k)

    for _ in range(max_iter):
        # Compute the distance between data points and medoids
        distances = pairwise_distances(data, data[medoids], metric='euclidean')
        labels = np.argmin(distances, axis=1)

        # Update medoids
        new_medoids = np.copy(medoids)
        for cluster in range(k):
            cluster_points = np.where(labels == cluster)[0]
            if len(cluster_points) > 0:  # Ensure the cluster is not empty
                intra_distances = pairwise_distances(data[cluster_points], data[cluster_points], metric='euclidean')
                medoid_index = np.argmin(np.sum(intra_distances, axis=1))
                new_medoids[cluster] = cluster_points[medoid_index]

        # Check for convergence
        if np.array_equal(medoids, new_medoids):
            break

        medoids = new_medoids

    # Final labels
    distances = pairwise_distances(data, data[medoids], metric='euclidean')
    labels = np.argmin(distances, axis=1)
    return medoids, labels

# Main block to test the K-Medoids algorithm
if __name__ == "__main__":  # Corrected special variable check
    from sklearn.datasets import make_blobs
    import matplotlib.pyplot as plt

    # Generate synthetic data
    data, _ = make_blobs(n_samples=300, centers=3, cluster_std=0.6, random_state=0)
    k = 3

    # Apply K-Medoids clustering
    medoids, labels = k_medoids(data, k, random_state=42)

    # Visualize the results
    plt.scatter(data[:, 0], data[:, 1], c=labels, cmap='viridis', marker='o')
    plt.scatter(data[medoids][:, 0], data[medoids][:, 1], c='red', marker='X', s=200, label='Medoids')
    plt.legend()
    plt.title("K-Medoids Clustering")
    plt.show()
